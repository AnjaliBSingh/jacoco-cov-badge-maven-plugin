package org.gahan;

import java.io.FileReader;
import java.io.IOException;

import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;

import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDMMType1Font;

/**
 * BadgeGenerator
 */
public class BadgeUtility {

  // jacoco csv report column number
  public static final int INSTRUCTION_MISSED_COL = 3;
  public static final int INSTRUCTION_COVERED_COL = 4;

  /**
   * Calculates width of given string in pixels. Font size currently is 11,
   * default
   *
   * @param str input string needed
   * @return width in pixels as floating point value
   */
  public static float calculateWidth(String str) throws IOException {
    PDFont font = PDMMType1Font.HELVETICA;
    int fontSize = 11;
    float width = ((font.getStringWidth(str) / 1000) * fontSize) + 10.0f;
    return width;
  }

  /**
   * Calcualte coverage %age from csv reprot generated by jacoco.
   *
   * @param csvPath Absolute path of csv report
   * @return integer value containing total coverage
   * @throws IOException
   * @throws NumberFormatException
   */
  public static int calculateCoverage(String csvPath) throws NumberFormatException, IOException {
    // intialize reader
    CSVReader reader =
        new CSVReaderBuilder(new FileReader(csvPath)).withSkipLines(1).build();

    // counter for total instructions missed
    long instructionsMissed = 0;

    // counter for total instructions covered
    long instructionsCovered = 0;

    // loop thorugh csv and update counters
    String[] line;
    while (null != (line = reader.readNext())) {
      if (line[INSTRUCTION_MISSED_COL] != null && !line[INSTRUCTION_MISSED_COL].equals("")) {
        instructionsMissed += Integer.parseInt(line[INSTRUCTION_MISSED_COL]);
      }

      if (line[INSTRUCTION_COVERED_COL] != null && !line[INSTRUCTION_COVERED_COL].equals("")) {
        instructionsCovered += Integer.parseInt(line[INSTRUCTION_COVERED_COL]);
      }
    }
    reader.close();

    // caluclate coverage
    float totalInstructions = instructionsCovered + instructionsMissed;
    float coveragePercent = (instructionsCovered / totalInstructions) * 100.0f;
    int coverage = (int) Math.floor(coveragePercent);
    return coverage;
  }
}
